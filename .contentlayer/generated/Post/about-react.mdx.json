{
  "title": "About React JS",
  "about": "Keep beeting on React",
  "date": "2023-03-02T00:00:00.000Z",
  "updated": "2023-03-02T00:00:00.000Z",
  "tags": [
    "React",
    "JS"
  ],
  "body": {
    "raw": "\n## Intro\n\nI want to take the opportunity to write a bit about React.\nWhile there are new frameworks out there that are getting more and more popular, I want to write about React from my perspective as a developer who has been working with React fulltime.\nWhy React is a good choice for building user interfaces and why you should consider using React in your next project.\nHow does React works and how to think in React.\n\nI will cover in this blog post:\n\n1. What is React.\n2. Why should we use React.\n3. React downsides.\n4. How to think in React, the mental model.\n5. Why is React popular.\n\n### What is React\n\n    The short part:\n    React is a library for building user interfaces.\n    React was created by Facebook.\n\n    We can make it simple and short like that but if you are interested to know more I recommend reading further.\n\nReact is a powerful library that makes life much easier for us developers to create good user experiences both on the web and on mobile platforms using React native.\nSome people argue that React is a framework and not a library but if you read the docs by the React team they define it as a library.\nThe library provides a virtual DOM (Document Object Model) that increases the overall performance of the application by reducing the amount of DOM manipulation required.\n\nI would say React is a library cause you don’t get anything else together with React like a router or how to style your components.\nIt is up to you and your team what packages you want to use.\nOther frameworks like `Vue` or `Svelte` comes with some built-in packages that you can use right away.\n\nIf you are using `Next js` which is a meta framework on top of React, then we can say that we are using a framework, but React is still a library!\n\nReact follows a declarative approach to programming, meaning that developers declare what the user interface should look like and React takes care of rendering the components and keeping the state of the components in sync with the user interface.\nIn my opinion, this approach makes it easier for us developers to understand and debug the code, and it also makes it easier to build complex UIs because the declarative approach allows for better abstraction and encapsulation of components.\n\n### Why React\n\nReact has been open source since May 2013 by Facebook.\nIt has been in constant development and new features have been added to the library since 2013.\nTake a look at React and how we wrote our components back then compared to today, I would say it’s almost like a new library now when the hooks API has been the new way of writing React.\n\nThere are several reasons why React is a popular choice for building user interfaces in 2023:\n\n- **Large Community**: React has a large and active community of developers who contribute to its development and provide support. This makes it easier for developers to find solutions to problems and stay up to date with the latest advancements. For example, the _[TanStack](https://tanstack.com/)_ gives us everything we need when it comes to _data management_, _data visualization_, _charts_, _tables_, and _UI components_.\n\n- **Performance**: React uses a [virtual DOM](https://reactjs.org/docs/faq-internals.html) (Document Object Model) which allows it to update only the parts of the user interface that have changed, making it highly performant even for complex and large applications. This approach makes it possible for us devs to use the declarative API of React, where we tell React what state the UI should be in and make sure the DOM matches the new state.\n\n- **Reusability**: React components can be easily reused across the application, promoting code reusability and reducing the amount of code needed to be written. Components of course are what we use to build our UI, but even the hooks-API makes it possible to create our reusable hooks, for example, a `useToggle` hook could look like this:\n\n```tsx\nfunction useToggle(initialState = false) {\n\tconst [state, setState] = useState(initialState)\n\tconst handlers = useMemo(\n\t\t() => ({\n\t\t\ttoggle: () => {\n\t\t\t\tsetState((p) => !p)\n\t\t\t},\n\t\t\ttoTrue: () => {\n\t\t\t\tsetState(true)\n\t\t\t},\n\t\t\ttoFalse: () => {\n\t\t\t\tsetState(false)\n\t\t\t},\n\t\t\treset: () => {\n\t\t\t\tsetState(initialState)\n\t\t\t},\n\t\t}),\n\t\t[initialState]\n\t)\n\n\treturn [state, handlers]\n}\n```\n\nAnd they use it like this:\n\n```tsx\n\tfunction CompA(){\n\t\tconst [state,{toggle}] = useToggle()\n\t\treturn <div> <button onClick={toggle> {state ? \"On\" : \"Off\"} </button> </div>\n\t}\n```\n\n- **Integration**: React can be easily integrated with other libraries and technologies, allowing for a flexible and scalable architecture. For example, React can be integrated with a back-end server to build a full-stack application, or with other libraries such as [Recoil](https://recoiljs.org/) or [jotai](https://jotai.org/) for state management, or with mapping libraries like Google Maps to display maps in a React app.\n\n- **Mobile-First**: React Native, the mobile version of React, makes it easy to build high-performing native mobile applications for iOS and Android platforms.\n\n- **Tooling**: React has a rich ecosystem of tools and libraries, including developer tools, testing frameworks, and state management solutions. If you get stuck on a problem it is much easier to get help or find the solution to your problem.\n\n### The downsides\n\nEven if I am a big fan of React and enjoy writing React every day it is important to be open-minded and to know what React’s downsides are and perhaps in what projects React should not be used.\nSome of the downsides of using React:\n\n- **Steep learning curve**: React uses a unique approach to building user interfaces, and its syntax and concepts can take time to fully understand, especially for developers who are new to the library. Building a strong mental model on how React works, when it re-renders and not is important to make your life easier and to write good React applications.\n\n- **Over-reliance on third-party libraries**: While React provides a solid foundation for building UI components, it doesn't come with all the features you need to build a complete application. This means that you often have to rely on third-party libraries, which can lead to increased complexity and increased risk of compatibility issues. For example, when we need to add a router, we need to install one, like _[React-router](https://reactrouter.com/en/main)_. This refers us back to the topic that React is a library and not a framework.\n\n- **Complex**: React is powerful but could also be complex when working with a larger data set, where you as a developer need to know when it is time to optimize your code, for example, memoize function calls or values using `useCallback` or `useMemo`.\n\nWhile these are some downsides in React, they are common to many other popular JavaScript libraries/frameworks.\n\nIt's important to note that while these are downsides to using React, they are common to many popular JavaScript libraries and frameworks. The key is to weigh the benefits of using React against these potential drawbacks and determine if it's the right tool for you and your team.\n\n### The mental model of React\n\nLet’s go through React and how it works, what are the main concepts, how React updates the UI and how can we build a stronger mental model to make our life easier when working with complex problems.\n\nTo explain the mental model of React in a user-friendly way, you could use the analogy of a real-world painter. Imagine that you are painting a portrait, and you need to make changes to the painting based on feedback from the person you are painting. You wouldn't want to start from scratch every time you need to make a change, as that would be slow and inefficient. Instead, you might create a transparent overlay on top of the painting, where you can make your changes and see how they look in real-time. Once you're happy with the changes, you would apply them to the actual painting.\n\nSimilarly, React creates a virtual representation of the UI that is like a transparent overlay on top of the actual UI. When changes are made, React updates the virtual representation and compares it to the previous version to determine the specific changes that need to be made to the actual UI. This process is like applying changes to the transparent overlay and then applying them to the actual painting. Just as the painter can work more efficiently and quickly with an overlay, React can update the UI more efficiently and quickly with its virtual representation.\n\nAt a high level, React works by creating a virtual representation of the user interface in memory and using it to efficiently update the actual UI as necessary.\n\nReact needs to trigger a re-render to figure out how a state change should update the user interface.\nRe-render happens when the state is defined in the parent component, and when the state updates.\nAll children of the parent component where the state belongs will be included in the re-render process.\n\nThis is what React is doing to keep the application UI in sync with the React state.\nThe re-render process is important because it calculates what in our UI needs to be changed/updated.\n\nLet’s show this process with an example to make everything much more clear on how the re-render works.\n\n[Code Sandbox](https://codesandbox.io/s/lucid-sammet-9l4sud?file=/src/App.tsx:65-639)\n\n```\ninterface InputProps {\n  text: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst Input = ({ text, onChange }: InputProps) => {\n  console.log(\"Render Input\");\n  return (\n    <div>\n      <input type=\"text\" value={text} onChange={onChange} />\n    </div>\n  );\n};\n\nexport default function App() {\n  const [text, setText] = useState(\"\");\n  return (\n    <div className=\"App\">\n      <h1>App about rendering in React</h1>\n      <Input\n        text={text}\n        onChange={(e) => {\n          setText(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n\n```\n\nEvery re-render that React makes is a snapshot of the new UI and compares it with the previous UI so that #React knows what to update.\nIn our example, when the state updates, we trigger a new snapshot so that React can find out what needs to be updated.\n\nOne big misunderstanding is that the child components that receive the state via props will be updated, but that is not how it works.\nIf we have another component included in the parents component tree _(in this case the `App.tsx`)_ but don’t receive any props,\nThat component will be included in the re-render process of React.\n\nLet’s go through an example.\nSame example as the previous one but this time\nWe added a `Title` component.\n\nWe know that:\n\n- Enter something into the input field that will update the state defined in `App`.\n- React will get a new snapshot and compares it with the previous one.\n- React will trigger a re-render.\n\n```\ninterface InputProps {\n  text: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst Input = ({ text, onChange }: InputProps) => {\n  console.log(\"Render Input\");\n  return (\n    <div>\n      <input type=\"text\" value={text} onChange={onChange} />\n    </div>\n  );\n};\n\nconst Title = () => {\n  console.log(\"Render Title\");\n  return  <h1>App about rendering in React</h1>\n};\n\nexport default function App() {\n  const [text, setText] = useState(\"\");\n  return (\n    <div className=\"App\">\n      <Title>\n        <h1>App about rendering in React</h1>\n      </Title>\n      <Input\n        text={text}\n        onChange={(e) => {\n          setText(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n\n```\n\nThe `Title` component does not take in any props, but what happens when we type something in the input?\nBoth the Title component and the Input component will be re-rendered.\n\nWhen the parent component re-renders, in this case, `App` since the state has been updated from the `Input` component.\nAll the components down in the tree will be affected and will there to be updated.\nThis is the default behavior of React, to update and make sure the state is synced with the UI.\n\nThere are tools/APIs that React gives us on how we can change this behavior. Something to note is that these tools are used to optimize the code.\nThe default behavior of React is to make a re-render, this is how we can update the UI.\nThe APIs I am talking about are for example:\n\n- useMemo\n- useCallback\n- memo\n\nThey are used to memoize values, components, and functions but should only be used when they have to be used when we will gain a larger performance gain in our application.\n\nAn example of how could prevent a pre-rendering for the `<Title/>` component would be to memorize the component itself using the `memo` API.\n\n> Note I am meaning `memo` and not `useMemo` which is a hook that you use in your component while `memo` is a function that we pass in our component.\n\nIn our case the `Title` component does not receive any props, we know that nothing will change, and the component does not have to be updated as soon as a new state update is triggered.\nWe can solve this problem using [`Rect.memo`](https://reactjs.org/docs/react-api.html).\nWe wrap our component with the `memo` function like this:\n\n```\nimport {memo} from \"react\"\n\nconst Title = memo(() => {\n  console.log(\"Render Title\");\n  return  <h1>App about rendering in React</h1>\n});\n\n```\n\nWhat `memo` is doing is it #[memoize](https://en.wikipedia.org/wiki/Memoization) our component and tells React to not include this component in the re-render process if none of the component props changes.\nSince we don’t receive any props, the component will not re-render when a state update happens.\n\nThe `console.log` inside the component will run once, when the component mounts, then after every re-render the component will not be updated. The memoized component (`Title`) will use the first snapshot that was created when the component was mounted.\nSince nothing in the component will ever change this makes perfect sense.\n\n**So why do we not memoize all of our components?**\n\nDevelopers may tend to avoid re-renders as they may view them as inefficient, given that new frameworks offer different ways of updating UI. However, every approach has its own advantages and drawbacks, and there is no universal solution. React has a strong team of engineers constantly improving its performance, and it achieves UI-state synchronization by triggering re-renders. React is capable of handling the re-rendering process well, as it is an essential part of its design. It is not advisable to optimize for unnecessary cases. If your application is running smoothly and has an excellent user experience, there is no reason to make changes. Nevertheless, you may use tools such as `useCallback`, `memo`, and `useMemo` whenever necessary. In a forthcoming post, we will discuss the appropriate methods and timing for utilizing these tools.\n\nKeep in mind that memoization carries a cost as it involves storing data in a cache that may take up additional space.\n\n### React and its popularity\n\nReact has remained one of the most popular JavaScript frameworks in recent years, as evidenced by various surveys including the latest _[State of JS](https://stateofjs.com/en-us/)_ report, which tracks React's popularity and usage over different years. Despite being open-sourced in 2013, React continues to evolve and grow thanks to the contributions of its large and active community. Several factors have contributed to React's popularity, including its component-based architecture, declarative programming model, virtual DOM, performance, and the availability of numerous resources, libraries, and tools.\n\nHere is some point that has caused why React to be so popular.\n\n---\n\n- **Component-Based Architecture**: React uses a component-based architecture, which allows developers to build UIs in a modular way. Components are reusable, and they can be composed to create complex UIs. This makes the development process faster, more efficient, and more maintainable.\n\n- **Declarative Programming**: React uses a declarative programming model, which means that developers specify what they want the UI to look like, and React takes care of updating the UI when necessary.\n\n- **Virtual DOM**: React. uses a virtual DOM _(Document Object Model)_, which is an in-memory representation of the actual DOM. This allows React to minimize the number of updates to the real DOM, which can be slow and expensive. Instead, React updates the virtual DOM and then efficiently updates the real DOM only when it needs to.\n\n- **Large Community**: React has a large and active community of developers, which means that there are many resources, libraries, and tools available to help developers learn and work with React.\n\n- **Performance**: React is known for its high performance. By using a virtual DOM and minimizing updates to the actual DOM, React can deliver fast and efficient UI rendering.\n\nOverall, React offers a powerful combination of flexibility, simplicity, and performance, which makes it a popular choice for building modern web applications.\nReact has a large community of really good developers and tons of third-party libraries out there probably solved the problem that you can use.\n\n### Summary\n\nReact is a constantly evolving JavaScript library that has become an essential tool for building high-quality user interfaces. With React, you can build reusable components that make it easy to develop complex applications with great UI/UX. Although React has come a long way since its initial release, it remains a powerful and flexible library that is widely adopted by many organizations and companies, including Facebook, Instagram, Airbnb, and Netflix.\n\nWhile React is not a silver bullet and there are other frameworks and libraries to consider, it is worth learning and has great job opportunities. However, it's always a good idea to experiment with new frameworks and libraries to find the best solution for your project. For example, I work with React daily, but I also enjoy testing out other frameworks such as Solid.js or Svelte to gain inspiration and find different approaches to solving problems. In conclusion, learning React will undoubtedly be a valuable investment in your career as a developer.\n\n### Resources\n\n- [React docs](https://beta.reactjs.org/)\n- [Why react serenaders by Josh Comeau](https://www.joshwcomeau.com/react/why-react-re-renders/)\n- [State of js](https://stateofjs.com/en-us/)\n",
    "code": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),w=(t,e)=>{for(var a in e)r(t,a,{get:e[a],enumerable:!0})},l=(t,e,a,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of u(e))!y.call(t,o)&&o!==a&&r(t,o,{get:()=>e[o],enumerable:!(i=p(e,o))||i.enumerable});return t};var f=(t,e,a)=>(a=t!=null?d(m(t)):{},l(e||!t||!t.__esModule?r(a,\"default\",{value:t,enumerable:!0}):a,t)),B=t=>l(r({},\"__esModule\",{value:!0}),t);var c=g((F,s)=>{s.exports=_jsx_runtime});var A={};w(A,{default:()=>k,frontmatter:()=>b});var n=f(c()),b={title:\"About React JS\",about:\"Keep beeting on React\",date:new Date(16777152e5),updated:new Date(16777152e5),tags:[\"React\",\"JS\"]};function h(t){let e=Object.assign({h2:\"h2\",a:\"a\",span:\"span\",p:\"p\",ol:\"ol\",li:\"li\",h3:\"h3\",code:\"code\",ul:\"ul\",strong:\"strong\",em:\"em\",div:\"div\",pre:\"pre\",blockquote:\"blockquote\",hr:\"hr\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.h2,{id:\"intro\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#intro\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Intro\"]}),`\n`,(0,n.jsx)(e.p,{children:`I want to take the opportunity to write a bit about React.\nWhile there are new frameworks out there that are getting more and more popular, I want to write about React from my perspective as a developer who has been working with React fulltime.\nWhy React is a good choice for building user interfaces and why you should consider using React in your next project.\nHow does React works and how to think in React.`}),`\n`,(0,n.jsx)(e.p,{children:\"I will cover in this blog post:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"What is React.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Why should we use React.\"}),`\n`,(0,n.jsx)(e.li,{children:\"React downsides.\"}),`\n`,(0,n.jsx)(e.li,{children:\"How to think in React, the mental model.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Why is React popular.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.h3,{id:\"what-is-react\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#what-is-react\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What is React\"]}),`\n`,(0,n.jsx)(e.p,{children:`The short part:\nReact is a library for building user interfaces.\nReact was created by Facebook.`}),`\n`,(0,n.jsx)(e.p,{children:\"We can make it simple and short like that but if you are interested to know more I recommend reading further.\"}),`\n`,(0,n.jsx)(e.p,{children:`React is a powerful library that makes life much easier for us developers to create good user experiences both on the web and on mobile platforms using React native.\nSome people argue that React is a framework and not a library but if you read the docs by the React team they define it as a library.\nThe library provides a virtual DOM (Document Object Model) that increases the overall performance of the application by reducing the amount of DOM manipulation required.`}),`\n`,(0,n.jsxs)(e.p,{children:[`I would say React is a library cause you don\\u2019t get anything else together with React like a router or how to style your components.\nIt is up to you and your team what packages you want to use.\nOther frameworks like `,(0,n.jsx)(e.code,{children:\"Vue\"}),\" or \",(0,n.jsx)(e.code,{children:\"Svelte\"}),\" comes with some built-in packages that you can use right away.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you are using \",(0,n.jsx)(e.code,{children:\"Next js\"}),\" which is a meta framework on top of React, then we can say that we are using a framework, but React is still a library!\"]}),`\n`,(0,n.jsx)(e.p,{children:`React follows a declarative approach to programming, meaning that developers declare what the user interface should look like and React takes care of rendering the components and keeping the state of the components in sync with the user interface.\nIn my opinion, this approach makes it easier for us developers to understand and debug the code, and it also makes it easier to build complex UIs because the declarative approach allows for better abstraction and encapsulation of components.`}),`\n`,(0,n.jsxs)(e.h3,{id:\"why-react\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#why-react\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Why React\"]}),`\n`,(0,n.jsx)(e.p,{children:`React has been open source since May 2013 by Facebook.\nIt has been in constant development and new features have been added to the library since 2013.\nTake a look at React and how we wrote our components back then compared to today, I would say it\\u2019s almost like a new library now when the hooks API has been the new way of writing React.`}),`\n`,(0,n.jsx)(e.p,{children:\"There are several reasons why React is a popular choice for building user interfaces in 2023:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Large Community\"}),\": React has a large and active community of developers who contribute to its development and provide support. This makes it easier for developers to find solutions to problems and stay up to date with the latest advancements. For example, the \",(0,n.jsx)(e.em,{children:(0,n.jsx)(e.a,{href:\"https://tanstack.com/\",children:\"TanStack\"})}),\" gives us everything we need when it comes to \",(0,n.jsx)(e.em,{children:\"data management\"}),\", \",(0,n.jsx)(e.em,{children:\"data visualization\"}),\", \",(0,n.jsx)(e.em,{children:\"charts\"}),\", \",(0,n.jsx)(e.em,{children:\"tables\"}),\", and \",(0,n.jsx)(e.em,{children:\"UI components\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Performance\"}),\": React uses a \",(0,n.jsx)(e.a,{href:\"https://reactjs.org/docs/faq-internals.html\",children:\"virtual DOM\"}),\" (Document Object Model) which allows it to update only the parts of the user interface that have changed, making it highly performant even for complex and large applications. This approach makes it possible for us devs to use the declarative API of React, where we tell React what state the UI should be in and make sure the DOM matches the new state.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Reusability\"}),\": React components can be easily reused across the application, promoting code reusability and reducing the amount of code needed to be written. Components of course are what we use to build our UI, but even the hooks-API makes it possible to create our reusable hooks, for example, a \",(0,n.jsx)(e.code,{children:\"useToggle\"}),\" hook could look like this:\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"tsx\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"tsx\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"function\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"useToggle\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\",fontStyle:\"italic\"},children:\"initialState\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"false\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\") {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"const\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" [\"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"state\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\", \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"setState\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"] \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"useState\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"initialState\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\")\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"const\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"handlers\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"useMemo\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\t() \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"=>\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" ({\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\t\t\"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"toggle\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\": () \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"=>\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\t\t\t\"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"setState\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"((\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\",fontStyle:\"italic\"},children:\"p\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\") \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"=>\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"!\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"p\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\")\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\t\t},\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\t\t\"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"toTrue\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\": () \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"=>\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\t\t\t\"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"setState\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(\"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"true\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\")\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\t\t},\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\t\t\"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"toFalse\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\": () \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"=>\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\t\t\t\"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"setState\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(\"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"false\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\")\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\t\t},\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\t\t\"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"reset\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\": () \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"=>\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\t\t\t\"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"setState\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"initialState\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\")\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\t\t},\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\t}),\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\t[\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"initialState\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"]\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:\" \"}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"return\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" [\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"state\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\", \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"handlers\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"]\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"And they use it like this:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"tsx\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"tsx\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"function\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"CompA\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(){\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\t\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"const\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" [\"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"state\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\",{\"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"toggle\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}] \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"useToggle\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"()\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\t\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"return\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" <\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"div\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"> <\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"button\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\",fontStyle:\"italic\"},children:\"onClick\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"{\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"toggle\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\">\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" {state ? \"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"On\"'}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\": \"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"Off\"'}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"} \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"</\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"button\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\">\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"</\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"div\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\">\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\t\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"})]})]})})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Integration\"}),\": React can be easily integrated with other libraries and technologies, allowing for a flexible and scalable architecture. For example, React can be integrated with a back-end server to build a full-stack application, or with other libraries such as \",(0,n.jsx)(e.a,{href:\"https://recoiljs.org/\",children:\"Recoil\"}),\" or \",(0,n.jsx)(e.a,{href:\"https://jotai.org/\",children:\"jotai\"}),\" for state management, or with mapping libraries like Google Maps to display maps in a React app.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Mobile-First\"}),\": React Native, the mobile version of React, makes it easy to build high-performing native mobile applications for iOS and Android platforms.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Tooling\"}),\": React has a rich ecosystem of tools and libraries, including developer tools, testing frameworks, and state management solutions. If you get stuck on a problem it is much easier to get help or find the solution to your problem.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.h3,{id:\"the-downsides\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#the-downsides\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"The downsides\"]}),`\n`,(0,n.jsx)(e.p,{children:`Even if I am a big fan of React and enjoy writing React every day it is important to be open-minded and to know what React\\u2019s downsides are and perhaps in what projects React should not be used.\nSome of the downsides of using React:`}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Steep learning curve\"}),\": React uses a unique approach to building user interfaces, and its syntax and concepts can take time to fully understand, especially for developers who are new to the library. Building a strong mental model on how React works, when it re-renders and not is important to make your life easier and to write good React applications.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Over-reliance on third-party libraries\"}),\": While React provides a solid foundation for building UI components, it doesn't come with all the features you need to build a complete application. This means that you often have to rely on third-party libraries, which can lead to increased complexity and increased risk of compatibility issues. For example, when we need to add a router, we need to install one, like \",(0,n.jsx)(e.em,{children:(0,n.jsx)(e.a,{href:\"https://reactrouter.com/en/main\",children:\"React-router\"})}),\". This refers us back to the topic that React is a library and not a framework.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Complex\"}),\": React is powerful but could also be complex when working with a larger data set, where you as a developer need to know when it is time to optimize your code, for example, memoize function calls or values using \",(0,n.jsx)(e.code,{children:\"useCallback\"}),\" or \",(0,n.jsx)(e.code,{children:\"useMemo\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"While these are some downsides in React, they are common to many other popular JavaScript libraries/frameworks.\"}),`\n`,(0,n.jsx)(e.p,{children:\"It's important to note that while these are downsides to using React, they are common to many popular JavaScript libraries and frameworks. The key is to weigh the benefits of using React against these potential drawbacks and determine if it's the right tool for you and your team.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"the-mental-model-of-react\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#the-mental-model-of-react\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"The mental model of React\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Let\\u2019s go through React and how it works, what are the main concepts, how React updates the UI and how can we build a stronger mental model to make our life easier when working with complex problems.\"}),`\n`,(0,n.jsx)(e.p,{children:\"To explain the mental model of React in a user-friendly way, you could use the analogy of a real-world painter. Imagine that you are painting a portrait, and you need to make changes to the painting based on feedback from the person you are painting. You wouldn't want to start from scratch every time you need to make a change, as that would be slow and inefficient. Instead, you might create a transparent overlay on top of the painting, where you can make your changes and see how they look in real-time. Once you're happy with the changes, you would apply them to the actual painting.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Similarly, React creates a virtual representation of the UI that is like a transparent overlay on top of the actual UI. When changes are made, React updates the virtual representation and compares it to the previous version to determine the specific changes that need to be made to the actual UI. This process is like applying changes to the transparent overlay and then applying them to the actual painting. Just as the painter can work more efficiently and quickly with an overlay, React can update the UI more efficiently and quickly with its virtual representation.\"}),`\n`,(0,n.jsx)(e.p,{children:\"At a high level, React works by creating a virtual representation of the user interface in memory and using it to efficiently update the actual UI as necessary.\"}),`\n`,(0,n.jsx)(e.p,{children:`React needs to trigger a re-render to figure out how a state change should update the user interface.\nRe-render happens when the state is defined in the parent component, and when the state updates.\nAll children of the parent component where the state belongs will be included in the re-render process.`}),`\n`,(0,n.jsx)(e.p,{children:`This is what React is doing to keep the application UI in sync with the React state.\nThe re-render process is important because it calculates what in our UI needs to be changed/updated.`}),`\n`,(0,n.jsx)(e.p,{children:\"Let\\u2019s show this process with an example to make everything much more clear on how the re-render works.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://codesandbox.io/s/lucid-sammet-9l4sud?file=/src/App.tsx:65-639\",children:\"Code Sandbox\"})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`interface InputProps {\n  text: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst Input = ({ text, onChange }: InputProps) => {\n  console.log(\"Render Input\");\n  return (\n    <div>\n      <input type=\"text\" value={text} onChange={onChange} />\n    </div>\n  );\n};\n\nexport default function App() {\n  const [text, setText] = useState(\"\");\n  return (\n    <div className=\"App\">\n      <h1>App about rendering in React</h1>\n      <Input\n        text={text}\n        onChange={(e) => {\n          setText(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n\n`})}),`\n`,(0,n.jsx)(e.p,{children:`Every re-render that React makes is a snapshot of the new UI and compares it with the previous UI so that #React knows what to update.\nIn our example, when the state updates, we trigger a new snapshot so that React can find out what needs to be updated.`}),`\n`,(0,n.jsxs)(e.p,{children:[`One big misunderstanding is that the child components that receive the state via props will be updated, but that is not how it works.\nIf we have another component included in the parents component tree `,(0,n.jsxs)(e.em,{children:[\"(in this case the \",(0,n.jsx)(e.code,{children:\"App.tsx\"}),\")\"]}),` but don\\u2019t receive any props,\nThat component will be included in the re-render process of React.`]}),`\n`,(0,n.jsxs)(e.p,{children:[`Let\\u2019s go through an example.\nSame example as the previous one but this time\nWe added a `,(0,n.jsx)(e.code,{children:\"Title\"}),\" component.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"We know that:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Enter something into the input field that will update the state defined in \",(0,n.jsx)(e.code,{children:\"App\"}),\".\"]}),`\n`,(0,n.jsx)(e.li,{children:\"React will get a new snapshot and compares it with the previous one.\"}),`\n`,(0,n.jsx)(e.li,{children:\"React will trigger a re-render.\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`interface InputProps {\n  text: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst Input = ({ text, onChange }: InputProps) => {\n  console.log(\"Render Input\");\n  return (\n    <div>\n      <input type=\"text\" value={text} onChange={onChange} />\n    </div>\n  );\n};\n\nconst Title = () => {\n  console.log(\"Render Title\");\n  return  <h1>App about rendering in React</h1>\n};\n\nexport default function App() {\n  const [text, setText] = useState(\"\");\n  return (\n    <div className=\"App\">\n      <Title>\n        <h1>App about rendering in React</h1>\n      </Title>\n      <Input\n        text={text}\n        onChange={(e) => {\n          setText(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"Title\"}),` component does not take in any props, but what happens when we type something in the input?\nBoth the Title component and the Input component will be re-rendered.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"When the parent component re-renders, in this case, \",(0,n.jsx)(e.code,{children:\"App\"}),\" since the state has been updated from the \",(0,n.jsx)(e.code,{children:\"Input\"}),` component.\nAll the components down in the tree will be affected and will there to be updated.\nThis is the default behavior of React, to update and make sure the state is synced with the UI.`]}),`\n`,(0,n.jsx)(e.p,{children:`There are tools/APIs that React gives us on how we can change this behavior. Something to note is that these tools are used to optimize the code.\nThe default behavior of React is to make a re-render, this is how we can update the UI.\nThe APIs I am talking about are for example:`}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"useMemo\"}),`\n`,(0,n.jsx)(e.li,{children:\"useCallback\"}),`\n`,(0,n.jsx)(e.li,{children:\"memo\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"They are used to memoize values, components, and functions but should only be used when they have to be used when we will gain a larger performance gain in our application.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"An example of how could prevent a pre-rendering for the \",(0,n.jsx)(e.code,{children:\"<Title/>\"}),\" component would be to memorize the component itself using the \",(0,n.jsx)(e.code,{children:\"memo\"}),\" API.\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Note I am meaning \",(0,n.jsx)(e.code,{children:\"memo\"}),\" and not \",(0,n.jsx)(e.code,{children:\"useMemo\"}),\" which is a hook that you use in your component while \",(0,n.jsx)(e.code,{children:\"memo\"}),\" is a function that we pass in our component.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In our case the \",(0,n.jsx)(e.code,{children:\"Title\"}),` component does not receive any props, we know that nothing will change, and the component does not have to be updated as soon as a new state update is triggered.\nWe can solve this problem using `,(0,n.jsx)(e.a,{href:\"https://reactjs.org/docs/react-api.html\",children:(0,n.jsx)(e.code,{children:\"Rect.memo\"})}),`.\nWe wrap our component with the `,(0,n.jsx)(e.code,{children:\"memo\"}),\" function like this:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import {memo} from \"react\"\n\nconst Title = memo(() => {\n  console.log(\"Render Title\");\n  return  <h1>App about rendering in React</h1>\n});\n\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"What \",(0,n.jsx)(e.code,{children:\"memo\"}),\" is doing is it #\",(0,n.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Memoization\",children:\"memoize\"}),` our component and tells React to not include this component in the re-render process if none of the component props changes.\nSince we don\\u2019t receive any props, the component will not re-render when a state update happens.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"console.log\"}),\" inside the component will run once, when the component mounts, then after every re-render the component will not be updated. The memoized component (\",(0,n.jsx)(e.code,{children:\"Title\"}),`) will use the first snapshot that was created when the component was mounted.\nSince nothing in the component will ever change this makes perfect sense.`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"So why do we not memoize all of our components?\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Developers may tend to avoid re-renders as they may view them as inefficient, given that new frameworks offer different ways of updating UI. However, every approach has its own advantages and drawbacks, and there is no universal solution. React has a strong team of engineers constantly improving its performance, and it achieves UI-state synchronization by triggering re-renders. React is capable of handling the re-rendering process well, as it is an essential part of its design. It is not advisable to optimize for unnecessary cases. If your application is running smoothly and has an excellent user experience, there is no reason to make changes. Nevertheless, you may use tools such as \",(0,n.jsx)(e.code,{children:\"useCallback\"}),\", \",(0,n.jsx)(e.code,{children:\"memo\"}),\", and \",(0,n.jsx)(e.code,{children:\"useMemo\"}),\" whenever necessary. In a forthcoming post, we will discuss the appropriate methods and timing for utilizing these tools.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Keep in mind that memoization carries a cost as it involves storing data in a cache that may take up additional space.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"react-and-its-popularity\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#react-and-its-popularity\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"React and its popularity\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"React has remained one of the most popular JavaScript frameworks in recent years, as evidenced by various surveys including the latest \",(0,n.jsx)(e.em,{children:(0,n.jsx)(e.a,{href:\"https://stateofjs.com/en-us/\",children:\"State of JS\"})}),\" report, which tracks React's popularity and usage over different years. Despite being open-sourced in 2013, React continues to evolve and grow thanks to the contributions of its large and active community. Several factors have contributed to React's popularity, including its component-based architecture, declarative programming model, virtual DOM, performance, and the availability of numerous resources, libraries, and tools.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Here is some point that has caused why React to be so popular.\"}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Component-Based Architecture\"}),\": React uses a component-based architecture, which allows developers to build UIs in a modular way. Components are reusable, and they can be composed to create complex UIs. This makes the development process faster, more efficient, and more maintainable.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Declarative Programming\"}),\": React uses a declarative programming model, which means that developers specify what they want the UI to look like, and React takes care of updating the UI when necessary.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Virtual DOM\"}),\": React. uses a virtual DOM \",(0,n.jsx)(e.em,{children:\"(Document Object Model)\"}),\", which is an in-memory representation of the actual DOM. This allows React to minimize the number of updates to the real DOM, which can be slow and expensive. Instead, React updates the virtual DOM and then efficiently updates the real DOM only when it needs to.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Large Community\"}),\": React has a large and active community of developers, which means that there are many resources, libraries, and tools available to help developers learn and work with React.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Performance\"}),\": React is known for its high performance. By using a virtual DOM and minimizing updates to the actual DOM, React can deliver fast and efficient UI rendering.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:`Overall, React offers a powerful combination of flexibility, simplicity, and performance, which makes it a popular choice for building modern web applications.\nReact has a large community of really good developers and tons of third-party libraries out there probably solved the problem that you can use.`}),`\n`,(0,n.jsxs)(e.h3,{id:\"summary\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#summary\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Summary\"]}),`\n`,(0,n.jsx)(e.p,{children:\"React is a constantly evolving JavaScript library that has become an essential tool for building high-quality user interfaces. With React, you can build reusable components that make it easy to develop complex applications with great UI/UX. Although React has come a long way since its initial release, it remains a powerful and flexible library that is widely adopted by many organizations and companies, including Facebook, Instagram, Airbnb, and Netflix.\"}),`\n`,(0,n.jsx)(e.p,{children:\"While React is not a silver bullet and there are other frameworks and libraries to consider, it is worth learning and has great job opportunities. However, it's always a good idea to experiment with new frameworks and libraries to find the best solution for your project. For example, I work with React daily, but I also enjoy testing out other frameworks such as Solid.js or Svelte to gain inspiration and find different approaches to solving problems. In conclusion, learning React will undoubtedly be a valuable investment in your career as a developer.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"resources\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#resources\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Resources\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://beta.reactjs.org/\",children:\"React docs\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.joshwcomeau.com/react/why-react-re-renders/\",children:\"Why react serenaders by Josh Comeau\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://stateofjs.com/en-us/\",children:\"State of js\"})}),`\n`]})]})}function v(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var k=v;return B(A);})();\n;return Component;"
  },
  "_id": "about-react.mdx",
  "_raw": {
    "sourceFilePath": "about-react.mdx",
    "sourceFileName": "about-react.mdx",
    "sourceFileDir": ".",
    "contentType": "mdx",
    "flattenedPath": "about-react"
  },
  "type": "Post",
  "url": "/blog/about-react",
  "slug": "about-react"
}